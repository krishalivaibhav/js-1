Value properties:
 globalThis : A reference to the global object, providing access to global variables across different environments.
 Infinity : Represents positive infinity.
 NaN : Represents Not-A-Number value.
 undefined : Represents the primitive value undefined.
Function properties:
eval() : Evaluates JavaScript code represented as a string.
 isFinite() : Determines whether a value is a finite number.
 isNaN() : Determines whether a value is NaN (Not-A-Number).
 parseFloat() : Parses an argument (a string) and returns a floating point number.
 parseInt() : Parses a string argument and returns an integer.
 decodeURI() : Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.
 decodeURIComponent() : Decodes a URI component previously created by encodeURIComponent or by a similar routine.
    encodeURI() : Encodes a Uniform Resource Identifier (URI).
    encodeURIComponent() : Encodes a URI component.
    escape() Deprecated : Deprecated function that encodes a string.
  unescape() Deprecated : Deprecated function that decodes a string.
   Fundamental objects:
    Object : Creates an object wrapper for the given value.
    Function : Creates a new function.
    Boolean : Creates a new Boolean object.
    Symbol : Returns a new unique Symbol value.
Error objects:
    Error : Creates an error object.
    AggregateError : Creates an error object representing multiple errors.
    EvalError : Creates an error object regarding an error in the eval() function.
    RangeError : Creates an error object regarding a value not in the set or range of allowed values.
    ReferenceError : Creates an error object regarding an invalid reference.
    SyntaxError : Creates an error object regarding a syntax error.
    TypeError : Creates an error object regarding a type error.
    URIError : Creates an error object regarding errors with encoded URIs.
    InternalError Non-standard : Represents an error that occurs internally in JavaScript engines (non-standard).
Numbers and dates:
    Number : Creates a number object.
    BigInt : Creates a BigInt object.
    Math : Provides mathematical constants and functions.
    Date : Creates a new Date object representing a specific time.
 Text processing:
    String : Creates a string object.
    RegExp : Creates a regular expression object for matching text patterns.
The list continues with indexed collections, keyed collections, structured data, managing memory, control abstraction objects, reflection, and internationalization. 
AggregateError:
The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.

AggregateError is a subclass of Error.

Constructor:
AggregateError():
Creates a new AggregateError object.

Instance properties:
Also inherits instance properties from its parent Error.

These properties are defined on AggregateError.prototype and shared by all AggregateError instances.

AggregateError.prototype.constructor:
The constructor function that created the instance object. For AggregateError instances, the initial value is the AggregateError constructor.

AggregateError.prototype.name:
Represents the name for the type of error. For AggregateError.prototype.name, the initial value is "AggregateError".

These properties are own properties of each AggregateError instance.

errors:
An array representing the errors that were aggregated.

Instance methods:
Inherits instance methods from its parent Error.
arr.0; // a syntax error
JavaScript syntax requires properties beginning with a digit to be accessed using bracket notation instead of dot notation. It's also possible to quote the array indices (e.g., years['2'] instead of years[2]), although usually not necessary.

The 2 in years[2] is coerced into a string by the JavaScript engine through an implicit toString conversion. As a result, '2' and '02' would refer to two different slots on the years object, and the following example could be true:
console.log(years["2"] !== years["02"]);
Only years['2'] is an actual array index. years['02'] is an arbitrary string property that will not be visited in array iteration.

Relationship between length and numerical properties:
A JavaScript array's length property and numerical properties are connected.

Several of the built-in array methods (e.g., join(), slice(), indexOf(), etc.) take into account the value of an array's length property when they're called.

Other methods (e.g., push(), splice(), etc.) also result in updates to an array's length property.
const fruits = [];
fruits.push("banana", "apple", "peach");
console.log(fruits.length); // 3
hen setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's length property accordingly:
fruits[5] = "mango";
console.log(fruits[5]); // 'mango'
console.log(Object.keys(fruits)); // ['0', '1', '2', '5']
console.log(fruits.length); // 6
Increasing the length extends the array by adding empty slots without creating any new elements — not even undefined.
Decreasing the length property does, however, delete elements.
fruits.length = 2;
console.log(Object.keys(fruits)); // ['0', '1']
console.log(fruits.length); // 2
This is explained further on the length page.

Array methods and empty slots:
Array methods have different behaviors when encountering empty slots in sparse arrays. In general, older methods (e.g. forEach) treat empty slots differently from indices that contain undefined.

Methods that have special treatment for empty slots include the following: concat(), copyWithin(), every(), filter(), flat(), flatMap(), forEach(), indexOf(), lastIndexOf(), map(), reduce(), reduceRight(), reverse(), slice(), some(), sort(), and splice(). Iteration methods such as forEach don't visit empty slots at all. Other methods, such as concat, copyWithin, etc., preserve empty slots when doing the copying, so in the end the array is still sparse.
const colors = ["red", "yellow", "blue"];
colors[5] = "purple";
colors.forEach((item, index) => {
  console.log(`${index}: ${item}`);
});
// Output:
// 0: red
// 1: yellow
// 2: blue
// 5: purple

colors.reverse(); // ['purple', empty × 2, 'blue', 'yellow', 'red']
Newer methods (e.g. keys) do not treat empty slots specially and treat them as if they contain undefined. Methods that conflate empty slots with undefined elements include the following: entries(), fill(), find(), findIndex(), findLast(), findLastIndex(), includes(), join(), keys(), toLocaleString(), toReversed(), toSorted(), toSpliced(), values(), and with().
Arrays in JavaScript

Description:
Arrays in JavaScript are versatile data structures that allow for the storage and manipulation of collections of elements under a single variable name. They are commonly used to hold lists of items, and they offer various methods and properties for performing operations on the stored data.

Array Indices:
JavaScript arrays use nonnegative integers (or their respective string forms) as indices to access elements. Unlike associative arrays in some other languages, arbitrary strings cannot be used as indexes to access array elements. Arrays in JavaScript are zero-indexed, meaning the first element is at index 0, the second at index 1, and so forth.

Relationship between Length and Numerical Properties:
The length property of a JavaScript array is closely related to its numerical properties. Various array methods, such as push(), splice(), etc., automatically update the length property based on the number of elements in the array. Additionally, setting properties on an array object with valid array indexes outside the current bounds will adjust the length property accordingly.

Array Methods and Empty Slots:
JavaScript array methods handle empty slots (unassigned indexes) differently based on the operation being performed. Iteration methods like forEach() do not visit empty slots, while methods like concat(), copyWithin(), etc., treat empty slots as actual array elements. This behavior is essential to consider when working with sparse arrays.

Copying Methods and Mutating Methods:
Array methods in JavaScript can be classified into two categories: copying methods and mutating methods. Copying methods, such as concat(), slice(), etc., create new arrays without modifying the original array. On the other hand, mutating methods, including pop(), push(), etc., alter the original array in place. Understanding the distinction between these two types of methods is crucial for managing array data effectively.

Iterative Methods:
Many array methods in JavaScript accept a callback function as an argument, allowing for iterative processing of array elements. These methods, such as forEach(), map(), filter(), etc., invoke the callback function for each element in the array. The callback function typically receives three arguments: the current element, its index, and the array itself. Leveraging these iterative methods is common when performing operations like transformation, filtering, or aggregation on array data.

Generic Array Methods:
JavaScript array methods are generic, meaning they do not rely on accessing any internal data of the array object. As a result, these methods can be called on array-like objects as well. Array-like objects are objects that have a length property and indexed elements in the range 0 to length - 1. Common examples of array-like objects include the arguments object and various DOM collections.

Normalization of the Length Property:
The length property of JavaScript arrays undergoes normalization to ensure consistency and safety. It is converted to an integer and then clamped to a range between 0 and 253 - 1. If the length property is set to a number greater than 253 - 1, a TypeError is thrown. Additionally, NaN is treated as 0, ensuring predictable behavior even when the length property is not present or is undefined.
Array Methods:

concat():

Description: Concatenates two or more arrays and returns a new array with the combined elements.
Usage: array1.concat(array2, array3, ...)
Example: const array1 = [1, 2, 3]; const array2 = [4, 5, 6]; const concatenatedArray = array1.concat(array2);
copyWithin():

Description: Copies a sequence of elements within the array to another position in the same array, overwriting existing values.
Usage: array.copyWithin(target, start, end)
Example: const array = [1, 2, 3, 4, 5]; array.copyWithin(0, 3);
entries():

Description: Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
Usage: const iterator = array.entries(); for (const [index, value] of iterator) { console.log(index, value); }
Example: const array = ['a', 'b', 'c']; const iterator = array.entries(); for (const [index, value] of iterator) { console.log(index, value); }
